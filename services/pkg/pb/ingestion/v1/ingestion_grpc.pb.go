// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: ingestion/v1/ingestion.proto

package ingestionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestionService_GetChannel_FullMethodName             = "/ingestion.v1.IngestionService/GetChannel"
	IngestionService_ListChannels_FullMethodName           = "/ingestion.v1.IngestionService/ListChannels"
	IngestionService_SubscribeChannel_FullMethodName       = "/ingestion.v1.IngestionService/SubscribeChannel"
	IngestionService_UnsubscribeChannel_FullMethodName     = "/ingestion.v1.IngestionService/UnsubscribeChannel"
	IngestionService_GetVideo_FullMethodName               = "/ingestion.v1.IngestionService/GetVideo"
	IngestionService_ListVideos_FullMethodName             = "/ingestion.v1.IngestionService/ListVideos"
	IngestionService_CollectTrending_FullMethodName        = "/ingestion.v1.IngestionService/CollectTrending"
	IngestionService_CollectSubscriptions_FullMethodName   = "/ingestion.v1.IngestionService/CollectSubscriptions"
	IngestionService_CreateSnapshot_FullMethodName         = "/ingestion.v1.IngestionService/CreateSnapshot"
	IngestionService_GetSnapshot_FullMethodName            = "/ingestion.v1.IngestionService/GetSnapshot"
	IngestionService_ListSnapshots_FullMethodName          = "/ingestion.v1.IngestionService/ListSnapshots"
	IngestionService_ListGenres_FullMethodName             = "/ingestion.v1.IngestionService/ListGenres"
	IngestionService_GetGenre_FullMethodName               = "/ingestion.v1.IngestionService/GetGenre"
	IngestionService_GetGenreByCode_FullMethodName         = "/ingestion.v1.IngestionService/GetGenreByCode"
	IngestionService_CreateGenre_FullMethodName            = "/ingestion.v1.IngestionService/CreateGenre"
	IngestionService_UpdateGenre_FullMethodName            = "/ingestion.v1.IngestionService/UpdateGenre"
	IngestionService_EnableGenre_FullMethodName            = "/ingestion.v1.IngestionService/EnableGenre"
	IngestionService_DisableGenre_FullMethodName           = "/ingestion.v1.IngestionService/DisableGenre"
	IngestionService_ListYouTubeCategories_FullMethodName  = "/ingestion.v1.IngestionService/ListYouTubeCategories"
	IngestionService_GetYouTubeCategory_FullMethodName     = "/ingestion.v1.IngestionService/GetYouTubeCategory"
	IngestionService_UpdateYouTubeCategory_FullMethodName  = "/ingestion.v1.IngestionService/UpdateYouTubeCategory"
	IngestionService_GetKeyword_FullMethodName             = "/ingestion.v1.IngestionService/GetKeyword"
	IngestionService_ListKeywords_FullMethodName           = "/ingestion.v1.IngestionService/ListKeywords"
	IngestionService_ListKeywordsByGenre_FullMethodName    = "/ingestion.v1.IngestionService/ListKeywordsByGenre"
	IngestionService_CreateKeyword_FullMethodName          = "/ingestion.v1.IngestionService/CreateKeyword"
	IngestionService_UpdateKeyword_FullMethodName          = "/ingestion.v1.IngestionService/UpdateKeyword"
	IngestionService_EnableKeyword_FullMethodName          = "/ingestion.v1.IngestionService/EnableKeyword"
	IngestionService_DisableKeyword_FullMethodName         = "/ingestion.v1.IngestionService/DisableKeyword"
	IngestionService_DeleteKeyword_FullMethodName          = "/ingestion.v1.IngestionService/DeleteKeyword"
	IngestionService_ListVideoGenres_FullMethodName        = "/ingestion.v1.IngestionService/ListVideoGenres"
	IngestionService_AssignVideoToGenre_FullMethodName     = "/ingestion.v1.IngestionService/AssignVideoToGenre"
	IngestionService_RemoveVideoFromGenre_FullMethodName   = "/ingestion.v1.IngestionService/RemoveVideoFromGenre"
	IngestionService_ListAuditLogs_FullMethodName          = "/ingestion.v1.IngestionService/ListAuditLogs"
	IngestionService_GetAuditLog_FullMethodName            = "/ingestion.v1.IngestionService/GetAuditLog"
	IngestionService_ListBatchJobs_FullMethodName          = "/ingestion.v1.IngestionService/ListBatchJobs"
	IngestionService_GetBatchJob_FullMethodName            = "/ingestion.v1.IngestionService/GetBatchJob"
	IngestionService_ScheduleSnapshots_FullMethodName      = "/ingestion.v1.IngestionService/ScheduleSnapshots"
	IngestionService_UpdateChannels_FullMethodName         = "/ingestion.v1.IngestionService/UpdateChannels"
	IngestionService_CollectTrendingByGenre_FullMethodName = "/ingestion.v1.IngestionService/CollectTrendingByGenre"
	IngestionService_CollectAllTrending_FullMethodName     = "/ingestion.v1.IngestionService/CollectAllTrending"
)

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IngestionService provides gRPC API for video ingestion operations
type IngestionServiceClient interface {
	// Channel operations
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...grpc.CallOption) (*ListChannelsResponse, error)
	SubscribeChannel(ctx context.Context, in *SubscribeChannelRequest, opts ...grpc.CallOption) (*SubscribeChannelResponse, error)
	UnsubscribeChannel(ctx context.Context, in *UnsubscribeChannelRequest, opts ...grpc.CallOption) (*UnsubscribeChannelResponse, error)
	// Video operations
	GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error)
	ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosResponse, error)
	CollectTrending(ctx context.Context, in *CollectTrendingRequest, opts ...grpc.CallOption) (*CollectTrendingResponse, error)
	CollectSubscriptions(ctx context.Context, in *CollectSubscriptionsRequest, opts ...grpc.CallOption) (*CollectSubscriptionsResponse, error)
	// Snapshot operations
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error)
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// Genre operations
	ListGenres(ctx context.Context, in *ListGenresRequest, opts ...grpc.CallOption) (*ListGenresResponse, error)
	GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error)
	GetGenreByCode(ctx context.Context, in *GetGenreByCodeRequest, opts ...grpc.CallOption) (*GetGenreByCodeResponse, error)
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error)
	UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*UpdateGenreResponse, error)
	EnableGenre(ctx context.Context, in *EnableGenreRequest, opts ...grpc.CallOption) (*EnableGenreResponse, error)
	DisableGenre(ctx context.Context, in *DisableGenreRequest, opts ...grpc.CallOption) (*DisableGenreResponse, error)
	// YouTube Category operations
	ListYouTubeCategories(ctx context.Context, in *ListYouTubeCategoriesRequest, opts ...grpc.CallOption) (*ListYouTubeCategoriesResponse, error)
	GetYouTubeCategory(ctx context.Context, in *GetYouTubeCategoryRequest, opts ...grpc.CallOption) (*GetYouTubeCategoryResponse, error)
	UpdateYouTubeCategory(ctx context.Context, in *UpdateYouTubeCategoryRequest, opts ...grpc.CallOption) (*UpdateYouTubeCategoryResponse, error)
	// Keyword operations (updated with genre support)
	GetKeyword(ctx context.Context, in *GetKeywordRequest, opts ...grpc.CallOption) (*GetKeywordResponse, error)
	ListKeywords(ctx context.Context, in *ListKeywordsRequest, opts ...grpc.CallOption) (*ListKeywordsResponse, error)
	ListKeywordsByGenre(ctx context.Context, in *ListKeywordsByGenreRequest, opts ...grpc.CallOption) (*ListKeywordsByGenreResponse, error)
	CreateKeyword(ctx context.Context, in *CreateKeywordRequest, opts ...grpc.CallOption) (*CreateKeywordResponse, error)
	UpdateKeyword(ctx context.Context, in *UpdateKeywordRequest, opts ...grpc.CallOption) (*UpdateKeywordResponse, error)
	EnableKeyword(ctx context.Context, in *EnableKeywordRequest, opts ...grpc.CallOption) (*EnableKeywordResponse, error)
	DisableKeyword(ctx context.Context, in *DisableKeywordRequest, opts ...grpc.CallOption) (*DisableKeywordResponse, error)
	DeleteKeyword(ctx context.Context, in *DeleteKeywordRequest, opts ...grpc.CallOption) (*DeleteKeywordResponse, error)
	// Video-Genre operations
	ListVideoGenres(ctx context.Context, in *ListVideoGenresRequest, opts ...grpc.CallOption) (*ListVideoGenresResponse, error)
	AssignVideoToGenre(ctx context.Context, in *AssignVideoToGenreRequest, opts ...grpc.CallOption) (*AssignVideoToGenreResponse, error)
	RemoveVideoFromGenre(ctx context.Context, in *RemoveVideoFromGenreRequest, opts ...grpc.CallOption) (*RemoveVideoFromGenreResponse, error)
	// Audit operations
	ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error)
	GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error)
	// Batch job operations
	ListBatchJobs(ctx context.Context, in *ListBatchJobsRequest, opts ...grpc.CallOption) (*ListBatchJobsResponse, error)
	GetBatchJob(ctx context.Context, in *GetBatchJobRequest, opts ...grpc.CallOption) (*GetBatchJobResponse, error)
	// System operations
	ScheduleSnapshots(ctx context.Context, in *ScheduleSnapshotsRequest, opts ...grpc.CallOption) (*ScheduleSnapshotsResponse, error)
	UpdateChannels(ctx context.Context, in *UpdateChannelsRequest, opts ...grpc.CallOption) (*UpdateChannelsResponse, error)
	CollectTrendingByGenre(ctx context.Context, in *CollectTrendingByGenreRequest, opts ...grpc.CallOption) (*CollectTrendingByGenreResponse, error)
	CollectAllTrending(ctx context.Context, in *CollectAllTrendingRequest, opts ...grpc.CallOption) (*CollectAllTrendingResponse, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...grpc.CallOption) (*ListChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) SubscribeChannel(ctx context.Context, in *SubscribeChannelRequest, opts ...grpc.CallOption) (*SubscribeChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeChannelResponse)
	err := c.cc.Invoke(ctx, IngestionService_SubscribeChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UnsubscribeChannel(ctx context.Context, in *UnsubscribeChannelRequest, opts ...grpc.CallOption) (*UnsubscribeChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeChannelResponse)
	err := c.cc.Invoke(ctx, IngestionService_UnsubscribeChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideosResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CollectTrending(ctx context.Context, in *CollectTrendingRequest, opts ...grpc.CallOption) (*CollectTrendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectTrendingResponse)
	err := c.cc.Invoke(ctx, IngestionService_CollectTrending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CollectSubscriptions(ctx context.Context, in *CollectSubscriptionsRequest, opts ...grpc.CallOption) (*CollectSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectSubscriptionsResponse)
	err := c.cc.Invoke(ctx, IngestionService_CollectSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, IngestionService_CreateSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnapshotResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListGenres(ctx context.Context, in *ListGenresRequest, opts ...grpc.CallOption) (*ListGenresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGenresResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListGenres_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetGenreByCode(ctx context.Context, in *GetGenreByCodeRequest, opts ...grpc.CallOption) (*GetGenreByCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenreByCodeResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetGenreByCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_CreateGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*UpdateGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_UpdateGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) EnableGenre(ctx context.Context, in *EnableGenreRequest, opts ...grpc.CallOption) (*EnableGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_EnableGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) DisableGenre(ctx context.Context, in *DisableGenreRequest, opts ...grpc.CallOption) (*DisableGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_DisableGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListYouTubeCategories(ctx context.Context, in *ListYouTubeCategoriesRequest, opts ...grpc.CallOption) (*ListYouTubeCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListYouTubeCategoriesResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListYouTubeCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetYouTubeCategory(ctx context.Context, in *GetYouTubeCategoryRequest, opts ...grpc.CallOption) (*GetYouTubeCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetYouTubeCategoryResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetYouTubeCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UpdateYouTubeCategory(ctx context.Context, in *UpdateYouTubeCategoryRequest, opts ...grpc.CallOption) (*UpdateYouTubeCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateYouTubeCategoryResponse)
	err := c.cc.Invoke(ctx, IngestionService_UpdateYouTubeCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetKeyword(ctx context.Context, in *GetKeywordRequest, opts ...grpc.CallOption) (*GetKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListKeywords(ctx context.Context, in *ListKeywordsRequest, opts ...grpc.CallOption) (*ListKeywordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeywordsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListKeywordsByGenre(ctx context.Context, in *ListKeywordsByGenreRequest, opts ...grpc.CallOption) (*ListKeywordsByGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeywordsByGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListKeywordsByGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CreateKeyword(ctx context.Context, in *CreateKeywordRequest, opts ...grpc.CallOption) (*CreateKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_CreateKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UpdateKeyword(ctx context.Context, in *UpdateKeywordRequest, opts ...grpc.CallOption) (*UpdateKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_UpdateKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) EnableKeyword(ctx context.Context, in *EnableKeywordRequest, opts ...grpc.CallOption) (*EnableKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_EnableKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) DisableKeyword(ctx context.Context, in *DisableKeywordRequest, opts ...grpc.CallOption) (*DisableKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_DisableKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) DeleteKeyword(ctx context.Context, in *DeleteKeywordRequest, opts ...grpc.CallOption) (*DeleteKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_DeleteKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListVideoGenres(ctx context.Context, in *ListVideoGenresRequest, opts ...grpc.CallOption) (*ListVideoGenresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideoGenresResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListVideoGenres_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) AssignVideoToGenre(ctx context.Context, in *AssignVideoToGenreRequest, opts ...grpc.CallOption) (*AssignVideoToGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignVideoToGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_AssignVideoToGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) RemoveVideoFromGenre(ctx context.Context, in *RemoveVideoFromGenreRequest, opts ...grpc.CallOption) (*RemoveVideoFromGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVideoFromGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_RemoveVideoFromGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditLogResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListBatchJobs(ctx context.Context, in *ListBatchJobsRequest, opts ...grpc.CallOption) (*ListBatchJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBatchJobsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListBatchJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetBatchJob(ctx context.Context, in *GetBatchJobRequest, opts ...grpc.CallOption) (*GetBatchJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatchJobResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetBatchJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ScheduleSnapshots(ctx context.Context, in *ScheduleSnapshotsRequest, opts ...grpc.CallOption) (*ScheduleSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleSnapshotsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ScheduleSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UpdateChannels(ctx context.Context, in *UpdateChannelsRequest, opts ...grpc.CallOption) (*UpdateChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChannelsResponse)
	err := c.cc.Invoke(ctx, IngestionService_UpdateChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CollectTrendingByGenre(ctx context.Context, in *CollectTrendingByGenreRequest, opts ...grpc.CallOption) (*CollectTrendingByGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectTrendingByGenreResponse)
	err := c.cc.Invoke(ctx, IngestionService_CollectTrendingByGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CollectAllTrending(ctx context.Context, in *CollectAllTrendingRequest, opts ...grpc.CallOption) (*CollectAllTrendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectAllTrendingResponse)
	err := c.cc.Invoke(ctx, IngestionService_CollectAllTrending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
// All implementations must embed UnimplementedIngestionServiceServer
// for forward compatibility.
//
// IngestionService provides gRPC API for video ingestion operations
type IngestionServiceServer interface {
	// Channel operations
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsResponse, error)
	SubscribeChannel(context.Context, *SubscribeChannelRequest) (*SubscribeChannelResponse, error)
	UnsubscribeChannel(context.Context, *UnsubscribeChannelRequest) (*UnsubscribeChannelResponse, error)
	// Video operations
	GetVideo(context.Context, *GetVideoRequest) (*GetVideoResponse, error)
	ListVideos(context.Context, *ListVideosRequest) (*ListVideosResponse, error)
	CollectTrending(context.Context, *CollectTrendingRequest) (*CollectTrendingResponse, error)
	CollectSubscriptions(context.Context, *CollectSubscriptionsRequest) (*CollectSubscriptionsResponse, error)
	// Snapshot operations
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error)
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	// Genre operations
	ListGenres(context.Context, *ListGenresRequest) (*ListGenresResponse, error)
	GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error)
	GetGenreByCode(context.Context, *GetGenreByCodeRequest) (*GetGenreByCodeResponse, error)
	CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error)
	UpdateGenre(context.Context, *UpdateGenreRequest) (*UpdateGenreResponse, error)
	EnableGenre(context.Context, *EnableGenreRequest) (*EnableGenreResponse, error)
	DisableGenre(context.Context, *DisableGenreRequest) (*DisableGenreResponse, error)
	// YouTube Category operations
	ListYouTubeCategories(context.Context, *ListYouTubeCategoriesRequest) (*ListYouTubeCategoriesResponse, error)
	GetYouTubeCategory(context.Context, *GetYouTubeCategoryRequest) (*GetYouTubeCategoryResponse, error)
	UpdateYouTubeCategory(context.Context, *UpdateYouTubeCategoryRequest) (*UpdateYouTubeCategoryResponse, error)
	// Keyword operations (updated with genre support)
	GetKeyword(context.Context, *GetKeywordRequest) (*GetKeywordResponse, error)
	ListKeywords(context.Context, *ListKeywordsRequest) (*ListKeywordsResponse, error)
	ListKeywordsByGenre(context.Context, *ListKeywordsByGenreRequest) (*ListKeywordsByGenreResponse, error)
	CreateKeyword(context.Context, *CreateKeywordRequest) (*CreateKeywordResponse, error)
	UpdateKeyword(context.Context, *UpdateKeywordRequest) (*UpdateKeywordResponse, error)
	EnableKeyword(context.Context, *EnableKeywordRequest) (*EnableKeywordResponse, error)
	DisableKeyword(context.Context, *DisableKeywordRequest) (*DisableKeywordResponse, error)
	DeleteKeyword(context.Context, *DeleteKeywordRequest) (*DeleteKeywordResponse, error)
	// Video-Genre operations
	ListVideoGenres(context.Context, *ListVideoGenresRequest) (*ListVideoGenresResponse, error)
	AssignVideoToGenre(context.Context, *AssignVideoToGenreRequest) (*AssignVideoToGenreResponse, error)
	RemoveVideoFromGenre(context.Context, *RemoveVideoFromGenreRequest) (*RemoveVideoFromGenreResponse, error)
	// Audit operations
	ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error)
	GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error)
	// Batch job operations
	ListBatchJobs(context.Context, *ListBatchJobsRequest) (*ListBatchJobsResponse, error)
	GetBatchJob(context.Context, *GetBatchJobRequest) (*GetBatchJobResponse, error)
	// System operations
	ScheduleSnapshots(context.Context, *ScheduleSnapshotsRequest) (*ScheduleSnapshotsResponse, error)
	UpdateChannels(context.Context, *UpdateChannelsRequest) (*UpdateChannelsResponse, error)
	CollectTrendingByGenre(context.Context, *CollectTrendingByGenreRequest) (*CollectTrendingByGenreResponse, error)
	CollectAllTrending(context.Context, *CollectAllTrendingRequest) (*CollectAllTrendingResponse, error)
	mustEmbedUnimplementedIngestionServiceServer()
}

// UnimplementedIngestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestionServiceServer struct{}

func (UnimplementedIngestionServiceServer) GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedIngestionServiceServer) ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedIngestionServiceServer) SubscribeChannel(context.Context, *SubscribeChannelRequest) (*SubscribeChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeChannel not implemented")
}
func (UnimplementedIngestionServiceServer) UnsubscribeChannel(context.Context, *UnsubscribeChannelRequest) (*UnsubscribeChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeChannel not implemented")
}
func (UnimplementedIngestionServiceServer) GetVideo(context.Context, *GetVideoRequest) (*GetVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedIngestionServiceServer) ListVideos(context.Context, *ListVideosRequest) (*ListVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedIngestionServiceServer) CollectTrending(context.Context, *CollectTrendingRequest) (*CollectTrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectTrending not implemented")
}
func (UnimplementedIngestionServiceServer) CollectSubscriptions(context.Context, *CollectSubscriptionsRequest) (*CollectSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSubscriptions not implemented")
}
func (UnimplementedIngestionServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedIngestionServiceServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedIngestionServiceServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedIngestionServiceServer) ListGenres(context.Context, *ListGenresRequest) (*ListGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenres not implemented")
}
func (UnimplementedIngestionServiceServer) GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenre not implemented")
}
func (UnimplementedIngestionServiceServer) GetGenreByCode(context.Context, *GetGenreByCodeRequest) (*GetGenreByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreByCode not implemented")
}
func (UnimplementedIngestionServiceServer) CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedIngestionServiceServer) UpdateGenre(context.Context, *UpdateGenreRequest) (*UpdateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenre not implemented")
}
func (UnimplementedIngestionServiceServer) EnableGenre(context.Context, *EnableGenreRequest) (*EnableGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableGenre not implemented")
}
func (UnimplementedIngestionServiceServer) DisableGenre(context.Context, *DisableGenreRequest) (*DisableGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableGenre not implemented")
}
func (UnimplementedIngestionServiceServer) ListYouTubeCategories(context.Context, *ListYouTubeCategoriesRequest) (*ListYouTubeCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListYouTubeCategories not implemented")
}
func (UnimplementedIngestionServiceServer) GetYouTubeCategory(context.Context, *GetYouTubeCategoryRequest) (*GetYouTubeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYouTubeCategory not implemented")
}
func (UnimplementedIngestionServiceServer) UpdateYouTubeCategory(context.Context, *UpdateYouTubeCategoryRequest) (*UpdateYouTubeCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateYouTubeCategory not implemented")
}
func (UnimplementedIngestionServiceServer) GetKeyword(context.Context, *GetKeywordRequest) (*GetKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) ListKeywords(context.Context, *ListKeywordsRequest) (*ListKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeywords not implemented")
}
func (UnimplementedIngestionServiceServer) ListKeywordsByGenre(context.Context, *ListKeywordsByGenreRequest) (*ListKeywordsByGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeywordsByGenre not implemented")
}
func (UnimplementedIngestionServiceServer) CreateKeyword(context.Context, *CreateKeywordRequest) (*CreateKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) UpdateKeyword(context.Context, *UpdateKeywordRequest) (*UpdateKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) EnableKeyword(context.Context, *EnableKeywordRequest) (*EnableKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) DisableKeyword(context.Context, *DisableKeywordRequest) (*DisableKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) DeleteKeyword(context.Context, *DeleteKeywordRequest) (*DeleteKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) ListVideoGenres(context.Context, *ListVideoGenresRequest) (*ListVideoGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideoGenres not implemented")
}
func (UnimplementedIngestionServiceServer) AssignVideoToGenre(context.Context, *AssignVideoToGenreRequest) (*AssignVideoToGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignVideoToGenre not implemented")
}
func (UnimplementedIngestionServiceServer) RemoveVideoFromGenre(context.Context, *RemoveVideoFromGenreRequest) (*RemoveVideoFromGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVideoFromGenre not implemented")
}
func (UnimplementedIngestionServiceServer) ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}
func (UnimplementedIngestionServiceServer) GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLog not implemented")
}
func (UnimplementedIngestionServiceServer) ListBatchJobs(context.Context, *ListBatchJobsRequest) (*ListBatchJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBatchJobs not implemented")
}
func (UnimplementedIngestionServiceServer) GetBatchJob(context.Context, *GetBatchJobRequest) (*GetBatchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchJob not implemented")
}
func (UnimplementedIngestionServiceServer) ScheduleSnapshots(context.Context, *ScheduleSnapshotsRequest) (*ScheduleSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleSnapshots not implemented")
}
func (UnimplementedIngestionServiceServer) UpdateChannels(context.Context, *UpdateChannelsRequest) (*UpdateChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannels not implemented")
}
func (UnimplementedIngestionServiceServer) CollectTrendingByGenre(context.Context, *CollectTrendingByGenreRequest) (*CollectTrendingByGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectTrendingByGenre not implemented")
}
func (UnimplementedIngestionServiceServer) CollectAllTrending(context.Context, *CollectAllTrendingRequest) (*CollectAllTrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectAllTrending not implemented")
}
func (UnimplementedIngestionServiceServer) mustEmbedUnimplementedIngestionServiceServer() {}
func (UnimplementedIngestionServiceServer) testEmbeddedByValue()                          {}

// UnsafeIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServiceServer will
// result in compilation errors.
type UnsafeIngestionServiceServer interface {
	mustEmbedUnimplementedIngestionServiceServer()
}

func RegisterIngestionServiceServer(s grpc.ServiceRegistrar, srv IngestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestionService_ServiceDesc, srv)
}

func _IngestionService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListChannels(ctx, req.(*ListChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_SubscribeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).SubscribeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_SubscribeChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).SubscribeChannel(ctx, req.(*SubscribeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UnsubscribeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UnsubscribeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UnsubscribeChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UnsubscribeChannel(ctx, req.(*UnsubscribeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetVideo(ctx, req.(*GetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListVideos(ctx, req.(*ListVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CollectTrending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectTrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CollectTrending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CollectTrending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CollectTrending(ctx, req.(*CollectTrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CollectSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CollectSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CollectSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CollectSubscriptions(ctx, req.(*CollectSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListGenres(ctx, req.(*ListGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetGenre(ctx, req.(*GetGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetGenreByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetGenreByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetGenreByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetGenreByCode(ctx, req.(*GetGenreByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CreateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UpdateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UpdateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UpdateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UpdateGenre(ctx, req.(*UpdateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_EnableGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).EnableGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_EnableGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).EnableGenre(ctx, req.(*EnableGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_DisableGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).DisableGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_DisableGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).DisableGenre(ctx, req.(*DisableGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListYouTubeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListYouTubeCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListYouTubeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListYouTubeCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListYouTubeCategories(ctx, req.(*ListYouTubeCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetYouTubeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYouTubeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetYouTubeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetYouTubeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetYouTubeCategory(ctx, req.(*GetYouTubeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UpdateYouTubeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateYouTubeCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UpdateYouTubeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UpdateYouTubeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UpdateYouTubeCategory(ctx, req.(*UpdateYouTubeCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetKeyword(ctx, req.(*GetKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListKeywords(ctx, req.(*ListKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListKeywordsByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeywordsByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListKeywordsByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListKeywordsByGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListKeywordsByGenre(ctx, req.(*ListKeywordsByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CreateKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CreateKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CreateKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CreateKeyword(ctx, req.(*CreateKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UpdateKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UpdateKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UpdateKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UpdateKeyword(ctx, req.(*UpdateKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_EnableKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).EnableKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_EnableKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).EnableKeyword(ctx, req.(*EnableKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_DisableKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).DisableKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_DisableKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).DisableKeyword(ctx, req.(*DisableKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_DeleteKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).DeleteKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_DeleteKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).DeleteKeyword(ctx, req.(*DeleteKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListVideoGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideoGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListVideoGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListVideoGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListVideoGenres(ctx, req.(*ListVideoGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_AssignVideoToGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignVideoToGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).AssignVideoToGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_AssignVideoToGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).AssignVideoToGenre(ctx, req.(*AssignVideoToGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_RemoveVideoFromGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVideoFromGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).RemoveVideoFromGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_RemoveVideoFromGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).RemoveVideoFromGenre(ctx, req.(*RemoveVideoFromGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListAuditLogs(ctx, req.(*ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetAuditLog(ctx, req.(*GetAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListBatchJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBatchJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListBatchJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListBatchJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListBatchJobs(ctx, req.(*ListBatchJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetBatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetBatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetBatchJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetBatchJob(ctx, req.(*GetBatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ScheduleSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ScheduleSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ScheduleSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ScheduleSnapshots(ctx, req.(*ScheduleSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UpdateChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UpdateChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UpdateChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UpdateChannels(ctx, req.(*UpdateChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CollectTrendingByGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectTrendingByGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CollectTrendingByGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CollectTrendingByGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CollectTrendingByGenre(ctx, req.(*CollectTrendingByGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CollectAllTrending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectAllTrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CollectAllTrending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CollectAllTrending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CollectAllTrending(ctx, req.(*CollectAllTrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestionService_ServiceDesc is the grpc.ServiceDesc for IngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingestion.v1.IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannel",
			Handler:    _IngestionService_GetChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _IngestionService_ListChannels_Handler,
		},
		{
			MethodName: "SubscribeChannel",
			Handler:    _IngestionService_SubscribeChannel_Handler,
		},
		{
			MethodName: "UnsubscribeChannel",
			Handler:    _IngestionService_UnsubscribeChannel_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _IngestionService_GetVideo_Handler,
		},
		{
			MethodName: "ListVideos",
			Handler:    _IngestionService_ListVideos_Handler,
		},
		{
			MethodName: "CollectTrending",
			Handler:    _IngestionService_CollectTrending_Handler,
		},
		{
			MethodName: "CollectSubscriptions",
			Handler:    _IngestionService_CollectSubscriptions_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _IngestionService_CreateSnapshot_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _IngestionService_GetSnapshot_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _IngestionService_ListSnapshots_Handler,
		},
		{
			MethodName: "ListGenres",
			Handler:    _IngestionService_ListGenres_Handler,
		},
		{
			MethodName: "GetGenre",
			Handler:    _IngestionService_GetGenre_Handler,
		},
		{
			MethodName: "GetGenreByCode",
			Handler:    _IngestionService_GetGenreByCode_Handler,
		},
		{
			MethodName: "CreateGenre",
			Handler:    _IngestionService_CreateGenre_Handler,
		},
		{
			MethodName: "UpdateGenre",
			Handler:    _IngestionService_UpdateGenre_Handler,
		},
		{
			MethodName: "EnableGenre",
			Handler:    _IngestionService_EnableGenre_Handler,
		},
		{
			MethodName: "DisableGenre",
			Handler:    _IngestionService_DisableGenre_Handler,
		},
		{
			MethodName: "ListYouTubeCategories",
			Handler:    _IngestionService_ListYouTubeCategories_Handler,
		},
		{
			MethodName: "GetYouTubeCategory",
			Handler:    _IngestionService_GetYouTubeCategory_Handler,
		},
		{
			MethodName: "UpdateYouTubeCategory",
			Handler:    _IngestionService_UpdateYouTubeCategory_Handler,
		},
		{
			MethodName: "GetKeyword",
			Handler:    _IngestionService_GetKeyword_Handler,
		},
		{
			MethodName: "ListKeywords",
			Handler:    _IngestionService_ListKeywords_Handler,
		},
		{
			MethodName: "ListKeywordsByGenre",
			Handler:    _IngestionService_ListKeywordsByGenre_Handler,
		},
		{
			MethodName: "CreateKeyword",
			Handler:    _IngestionService_CreateKeyword_Handler,
		},
		{
			MethodName: "UpdateKeyword",
			Handler:    _IngestionService_UpdateKeyword_Handler,
		},
		{
			MethodName: "EnableKeyword",
			Handler:    _IngestionService_EnableKeyword_Handler,
		},
		{
			MethodName: "DisableKeyword",
			Handler:    _IngestionService_DisableKeyword_Handler,
		},
		{
			MethodName: "DeleteKeyword",
			Handler:    _IngestionService_DeleteKeyword_Handler,
		},
		{
			MethodName: "ListVideoGenres",
			Handler:    _IngestionService_ListVideoGenres_Handler,
		},
		{
			MethodName: "AssignVideoToGenre",
			Handler:    _IngestionService_AssignVideoToGenre_Handler,
		},
		{
			MethodName: "RemoveVideoFromGenre",
			Handler:    _IngestionService_RemoveVideoFromGenre_Handler,
		},
		{
			MethodName: "ListAuditLogs",
			Handler:    _IngestionService_ListAuditLogs_Handler,
		},
		{
			MethodName: "GetAuditLog",
			Handler:    _IngestionService_GetAuditLog_Handler,
		},
		{
			MethodName: "ListBatchJobs",
			Handler:    _IngestionService_ListBatchJobs_Handler,
		},
		{
			MethodName: "GetBatchJob",
			Handler:    _IngestionService_GetBatchJob_Handler,
		},
		{
			MethodName: "ScheduleSnapshots",
			Handler:    _IngestionService_ScheduleSnapshots_Handler,
		},
		{
			MethodName: "UpdateChannels",
			Handler:    _IngestionService_UpdateChannels_Handler,
		},
		{
			MethodName: "CollectTrendingByGenre",
			Handler:    _IngestionService_CollectTrendingByGenre_Handler,
		},
		{
			MethodName: "CollectAllTrending",
			Handler:    _IngestionService_CollectAllTrending_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingestion/v1/ingestion.proto",
}
