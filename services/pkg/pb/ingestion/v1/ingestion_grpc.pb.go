// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: ingestion/v1/ingestion.proto

package ingestionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IngestionService_GetChannel_FullMethodName           = "/ingestion.v1.IngestionService/GetChannel"
	IngestionService_ListChannels_FullMethodName         = "/ingestion.v1.IngestionService/ListChannels"
	IngestionService_SubscribeChannel_FullMethodName     = "/ingestion.v1.IngestionService/SubscribeChannel"
	IngestionService_UnsubscribeChannel_FullMethodName   = "/ingestion.v1.IngestionService/UnsubscribeChannel"
	IngestionService_GetVideo_FullMethodName             = "/ingestion.v1.IngestionService/GetVideo"
	IngestionService_ListVideos_FullMethodName           = "/ingestion.v1.IngestionService/ListVideos"
	IngestionService_CollectTrending_FullMethodName      = "/ingestion.v1.IngestionService/CollectTrending"
	IngestionService_CollectSubscriptions_FullMethodName = "/ingestion.v1.IngestionService/CollectSubscriptions"
	IngestionService_CreateSnapshot_FullMethodName       = "/ingestion.v1.IngestionService/CreateSnapshot"
	IngestionService_GetSnapshot_FullMethodName          = "/ingestion.v1.IngestionService/GetSnapshot"
	IngestionService_ListSnapshots_FullMethodName        = "/ingestion.v1.IngestionService/ListSnapshots"
	IngestionService_GetKeyword_FullMethodName           = "/ingestion.v1.IngestionService/GetKeyword"
	IngestionService_ListKeywords_FullMethodName         = "/ingestion.v1.IngestionService/ListKeywords"
	IngestionService_CreateKeyword_FullMethodName        = "/ingestion.v1.IngestionService/CreateKeyword"
	IngestionService_UpdateKeyword_FullMethodName        = "/ingestion.v1.IngestionService/UpdateKeyword"
	IngestionService_DeleteKeyword_FullMethodName        = "/ingestion.v1.IngestionService/DeleteKeyword"
	IngestionService_ScheduleSnapshots_FullMethodName    = "/ingestion.v1.IngestionService/ScheduleSnapshots"
	IngestionService_UpdateChannels_FullMethodName       = "/ingestion.v1.IngestionService/UpdateChannels"
)

// IngestionServiceClient is the client API for IngestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IngestionService provides gRPC API for video ingestion operations
type IngestionServiceClient interface {
	// Channel operations
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...grpc.CallOption) (*ListChannelsResponse, error)
	SubscribeChannel(ctx context.Context, in *SubscribeChannelRequest, opts ...grpc.CallOption) (*SubscribeChannelResponse, error)
	UnsubscribeChannel(ctx context.Context, in *UnsubscribeChannelRequest, opts ...grpc.CallOption) (*UnsubscribeChannelResponse, error)
	// Video operations
	GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error)
	ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosResponse, error)
	CollectTrending(ctx context.Context, in *CollectTrendingRequest, opts ...grpc.CallOption) (*CollectTrendingResponse, error)
	CollectSubscriptions(ctx context.Context, in *CollectSubscriptionsRequest, opts ...grpc.CallOption) (*CollectSubscriptionsResponse, error)
	// Snapshot operations
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error)
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// Keyword operations
	GetKeyword(ctx context.Context, in *GetKeywordRequest, opts ...grpc.CallOption) (*GetKeywordResponse, error)
	ListKeywords(ctx context.Context, in *ListKeywordsRequest, opts ...grpc.CallOption) (*ListKeywordsResponse, error)
	CreateKeyword(ctx context.Context, in *CreateKeywordRequest, opts ...grpc.CallOption) (*CreateKeywordResponse, error)
	UpdateKeyword(ctx context.Context, in *UpdateKeywordRequest, opts ...grpc.CallOption) (*UpdateKeywordResponse, error)
	DeleteKeyword(ctx context.Context, in *DeleteKeywordRequest, opts ...grpc.CallOption) (*DeleteKeywordResponse, error)
	// System operations
	ScheduleSnapshots(ctx context.Context, in *ScheduleSnapshotsRequest, opts ...grpc.CallOption) (*ScheduleSnapshotsResponse, error)
	UpdateChannels(ctx context.Context, in *UpdateChannelsRequest, opts ...grpc.CallOption) (*UpdateChannelsResponse, error)
}

type ingestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestionServiceClient(cc grpc.ClientConnInterface) IngestionServiceClient {
	return &ingestionServiceClient{cc}
}

func (c *ingestionServiceClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListChannels(ctx context.Context, in *ListChannelsRequest, opts ...grpc.CallOption) (*ListChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChannelsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) SubscribeChannel(ctx context.Context, in *SubscribeChannelRequest, opts ...grpc.CallOption) (*SubscribeChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeChannelResponse)
	err := c.cc.Invoke(ctx, IngestionService_SubscribeChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UnsubscribeChannel(ctx context.Context, in *UnsubscribeChannelRequest, opts ...grpc.CallOption) (*UnsubscribeChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeChannelResponse)
	err := c.cc.Invoke(ctx, IngestionService_UnsubscribeChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVideoResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideosResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CollectTrending(ctx context.Context, in *CollectTrendingRequest, opts ...grpc.CallOption) (*CollectTrendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectTrendingResponse)
	err := c.cc.Invoke(ctx, IngestionService_CollectTrending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CollectSubscriptions(ctx context.Context, in *CollectSubscriptionsRequest, opts ...grpc.CallOption) (*CollectSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectSubscriptionsResponse)
	err := c.cc.Invoke(ctx, IngestionService_CollectSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, IngestionService_CreateSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnapshotResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) GetKeyword(ctx context.Context, in *GetKeywordRequest, opts ...grpc.CallOption) (*GetKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_GetKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ListKeywords(ctx context.Context, in *ListKeywordsRequest, opts ...grpc.CallOption) (*ListKeywordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKeywordsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ListKeywords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) CreateKeyword(ctx context.Context, in *CreateKeywordRequest, opts ...grpc.CallOption) (*CreateKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_CreateKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UpdateKeyword(ctx context.Context, in *UpdateKeywordRequest, opts ...grpc.CallOption) (*UpdateKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_UpdateKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) DeleteKeyword(ctx context.Context, in *DeleteKeywordRequest, opts ...grpc.CallOption) (*DeleteKeywordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKeywordResponse)
	err := c.cc.Invoke(ctx, IngestionService_DeleteKeyword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) ScheduleSnapshots(ctx context.Context, in *ScheduleSnapshotsRequest, opts ...grpc.CallOption) (*ScheduleSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleSnapshotsResponse)
	err := c.cc.Invoke(ctx, IngestionService_ScheduleSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestionServiceClient) UpdateChannels(ctx context.Context, in *UpdateChannelsRequest, opts ...grpc.CallOption) (*UpdateChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChannelsResponse)
	err := c.cc.Invoke(ctx, IngestionService_UpdateChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestionServiceServer is the server API for IngestionService service.
// All implementations must embed UnimplementedIngestionServiceServer
// for forward compatibility.
//
// IngestionService provides gRPC API for video ingestion operations
type IngestionServiceServer interface {
	// Channel operations
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsResponse, error)
	SubscribeChannel(context.Context, *SubscribeChannelRequest) (*SubscribeChannelResponse, error)
	UnsubscribeChannel(context.Context, *UnsubscribeChannelRequest) (*UnsubscribeChannelResponse, error)
	// Video operations
	GetVideo(context.Context, *GetVideoRequest) (*GetVideoResponse, error)
	ListVideos(context.Context, *ListVideosRequest) (*ListVideosResponse, error)
	CollectTrending(context.Context, *CollectTrendingRequest) (*CollectTrendingResponse, error)
	CollectSubscriptions(context.Context, *CollectSubscriptionsRequest) (*CollectSubscriptionsResponse, error)
	// Snapshot operations
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error)
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	// Keyword operations
	GetKeyword(context.Context, *GetKeywordRequest) (*GetKeywordResponse, error)
	ListKeywords(context.Context, *ListKeywordsRequest) (*ListKeywordsResponse, error)
	CreateKeyword(context.Context, *CreateKeywordRequest) (*CreateKeywordResponse, error)
	UpdateKeyword(context.Context, *UpdateKeywordRequest) (*UpdateKeywordResponse, error)
	DeleteKeyword(context.Context, *DeleteKeywordRequest) (*DeleteKeywordResponse, error)
	// System operations
	ScheduleSnapshots(context.Context, *ScheduleSnapshotsRequest) (*ScheduleSnapshotsResponse, error)
	UpdateChannels(context.Context, *UpdateChannelsRequest) (*UpdateChannelsResponse, error)
	mustEmbedUnimplementedIngestionServiceServer()
}

// UnimplementedIngestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestionServiceServer struct{}

func (UnimplementedIngestionServiceServer) GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedIngestionServiceServer) ListChannels(context.Context, *ListChannelsRequest) (*ListChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedIngestionServiceServer) SubscribeChannel(context.Context, *SubscribeChannelRequest) (*SubscribeChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeChannel not implemented")
}
func (UnimplementedIngestionServiceServer) UnsubscribeChannel(context.Context, *UnsubscribeChannelRequest) (*UnsubscribeChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeChannel not implemented")
}
func (UnimplementedIngestionServiceServer) GetVideo(context.Context, *GetVideoRequest) (*GetVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedIngestionServiceServer) ListVideos(context.Context, *ListVideosRequest) (*ListVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedIngestionServiceServer) CollectTrending(context.Context, *CollectTrendingRequest) (*CollectTrendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectTrending not implemented")
}
func (UnimplementedIngestionServiceServer) CollectSubscriptions(context.Context, *CollectSubscriptionsRequest) (*CollectSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectSubscriptions not implemented")
}
func (UnimplementedIngestionServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedIngestionServiceServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedIngestionServiceServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedIngestionServiceServer) GetKeyword(context.Context, *GetKeywordRequest) (*GetKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) ListKeywords(context.Context, *ListKeywordsRequest) (*ListKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeywords not implemented")
}
func (UnimplementedIngestionServiceServer) CreateKeyword(context.Context, *CreateKeywordRequest) (*CreateKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) UpdateKeyword(context.Context, *UpdateKeywordRequest) (*UpdateKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) DeleteKeyword(context.Context, *DeleteKeywordRequest) (*DeleteKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyword not implemented")
}
func (UnimplementedIngestionServiceServer) ScheduleSnapshots(context.Context, *ScheduleSnapshotsRequest) (*ScheduleSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleSnapshots not implemented")
}
func (UnimplementedIngestionServiceServer) UpdateChannels(context.Context, *UpdateChannelsRequest) (*UpdateChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannels not implemented")
}
func (UnimplementedIngestionServiceServer) mustEmbedUnimplementedIngestionServiceServer() {}
func (UnimplementedIngestionServiceServer) testEmbeddedByValue()                          {}

// UnsafeIngestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestionServiceServer will
// result in compilation errors.
type UnsafeIngestionServiceServer interface {
	mustEmbedUnimplementedIngestionServiceServer()
}

func RegisterIngestionServiceServer(s grpc.ServiceRegistrar, srv IngestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedIngestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngestionService_ServiceDesc, srv)
}

func _IngestionService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListChannels(ctx, req.(*ListChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_SubscribeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).SubscribeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_SubscribeChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).SubscribeChannel(ctx, req.(*SubscribeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UnsubscribeChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UnsubscribeChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UnsubscribeChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UnsubscribeChannel(ctx, req.(*UnsubscribeChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetVideo(ctx, req.(*GetVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListVideos(ctx, req.(*ListVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CollectTrending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectTrendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CollectTrending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CollectTrending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CollectTrending(ctx, req.(*CollectTrendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CollectSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CollectSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CollectSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CollectSubscriptions(ctx, req.(*CollectSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_GetKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).GetKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_GetKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).GetKeyword(ctx, req.(*GetKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ListKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ListKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ListKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ListKeywords(ctx, req.(*ListKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_CreateKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).CreateKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_CreateKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).CreateKeyword(ctx, req.(*CreateKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UpdateKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UpdateKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UpdateKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UpdateKeyword(ctx, req.(*UpdateKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_DeleteKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).DeleteKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_DeleteKeyword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).DeleteKeyword(ctx, req.(*DeleteKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_ScheduleSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).ScheduleSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_ScheduleSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).ScheduleSnapshots(ctx, req.(*ScheduleSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestionService_UpdateChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServiceServer).UpdateChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngestionService_UpdateChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServiceServer).UpdateChannels(ctx, req.(*UpdateChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestionService_ServiceDesc is the grpc.ServiceDesc for IngestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingestion.v1.IngestionService",
	HandlerType: (*IngestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannel",
			Handler:    _IngestionService_GetChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _IngestionService_ListChannels_Handler,
		},
		{
			MethodName: "SubscribeChannel",
			Handler:    _IngestionService_SubscribeChannel_Handler,
		},
		{
			MethodName: "UnsubscribeChannel",
			Handler:    _IngestionService_UnsubscribeChannel_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _IngestionService_GetVideo_Handler,
		},
		{
			MethodName: "ListVideos",
			Handler:    _IngestionService_ListVideos_Handler,
		},
		{
			MethodName: "CollectTrending",
			Handler:    _IngestionService_CollectTrending_Handler,
		},
		{
			MethodName: "CollectSubscriptions",
			Handler:    _IngestionService_CollectSubscriptions_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _IngestionService_CreateSnapshot_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _IngestionService_GetSnapshot_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _IngestionService_ListSnapshots_Handler,
		},
		{
			MethodName: "GetKeyword",
			Handler:    _IngestionService_GetKeyword_Handler,
		},
		{
			MethodName: "ListKeywords",
			Handler:    _IngestionService_ListKeywords_Handler,
		},
		{
			MethodName: "CreateKeyword",
			Handler:    _IngestionService_CreateKeyword_Handler,
		},
		{
			MethodName: "UpdateKeyword",
			Handler:    _IngestionService_UpdateKeyword_Handler,
		},
		{
			MethodName: "DeleteKeyword",
			Handler:    _IngestionService_DeleteKeyword_Handler,
		},
		{
			MethodName: "ScheduleSnapshots",
			Handler:    _IngestionService_ScheduleSnapshots_Handler,
		},
		{
			MethodName: "UpdateChannels",
			Handler:    _IngestionService_UpdateChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingestion/v1/ingestion.proto",
}
